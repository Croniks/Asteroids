//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/StandartInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;


namespace AsteroidsGame
{
    public partial class @StandartInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @StandartInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""StandartInput"",
    ""maps"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""id"": ""ce38bf93-67ff-431a-b5d5-89f362776db6"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""c9bba047-e545-4f6d-9946-19310cff2696"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootBullets"",
                    ""type"": ""Button"",
                    ""id"": ""967b4fcb-1626-4d34-a997-add2448b5d6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootLasser"",
                    ""type"": ""Button"",
                    ""id"": ""b5796621-5cea-4386-8d05-d6bc3a797c32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""120d06a3-5b41-4364-b563-5c98faeb467b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7bacc3a3-6ff9-4632-91fc-eefccf30a98e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74f3414f-de4c-4f3c-9711-9dc35114ffb9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootBullets"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3514b787-1772-42c1-b403-467fa52cba95"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLasser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9c3e6cfc-3fc2-4e38-b7a4-be129d1f2107"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6d18af9c-dd25-49ca-8488-41a18559bb43"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f6c15583-8ba7-4fdc-b37e-c42892587002"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // KeyboardAndMouse
            m_KeyboardAndMouse = asset.FindActionMap("KeyboardAndMouse", throwIfNotFound: true);
            m_KeyboardAndMouse_MoveForward = m_KeyboardAndMouse.FindAction("MoveForward", throwIfNotFound: true);
            m_KeyboardAndMouse_ShootBullets = m_KeyboardAndMouse.FindAction("ShootBullets", throwIfNotFound: true);
            m_KeyboardAndMouse_ShootLasser = m_KeyboardAndMouse.FindAction("ShootLasser", throwIfNotFound: true);
            m_KeyboardAndMouse_Rotation = m_KeyboardAndMouse.FindAction("Rotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // KeyboardAndMouse
        private readonly InputActionMap m_KeyboardAndMouse;
        private IKeyboardAndMouseActions m_KeyboardAndMouseActionsCallbackInterface;
        private readonly InputAction m_KeyboardAndMouse_MoveForward;
        private readonly InputAction m_KeyboardAndMouse_ShootBullets;
        private readonly InputAction m_KeyboardAndMouse_ShootLasser;
        private readonly InputAction m_KeyboardAndMouse_Rotation;
        public struct KeyboardAndMouseActions
        {
            private @StandartInput m_Wrapper;
            public KeyboardAndMouseActions(@StandartInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveForward => m_Wrapper.m_KeyboardAndMouse_MoveForward;
            public InputAction @ShootBullets => m_Wrapper.m_KeyboardAndMouse_ShootBullets;
            public InputAction @ShootLasser => m_Wrapper.m_KeyboardAndMouse_ShootLasser;
            public InputAction @Rotation => m_Wrapper.m_KeyboardAndMouse_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_KeyboardAndMouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardAndMouseActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardAndMouseActions instance)
            {
                if (m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface != null)
                {
                    @MoveForward.started -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnMoveForward;
                    @MoveForward.performed -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnMoveForward;
                    @MoveForward.canceled -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnMoveForward;
                    @ShootBullets.started -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootBullets;
                    @ShootBullets.performed -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootBullets;
                    @ShootBullets.canceled -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootBullets;
                    @ShootLasser.started -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootLasser;
                    @ShootLasser.performed -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootLasser;
                    @ShootLasser.canceled -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnShootLasser;
                    @Rotation.started -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface.OnRotation;
                }
                m_Wrapper.m_KeyboardAndMouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveForward.started += instance.OnMoveForward;
                    @MoveForward.performed += instance.OnMoveForward;
                    @MoveForward.canceled += instance.OnMoveForward;
                    @ShootBullets.started += instance.OnShootBullets;
                    @ShootBullets.performed += instance.OnShootBullets;
                    @ShootBullets.canceled += instance.OnShootBullets;
                    @ShootLasser.started += instance.OnShootLasser;
                    @ShootLasser.performed += instance.OnShootLasser;
                    @ShootLasser.canceled += instance.OnShootLasser;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                }
            }
        }
        public KeyboardAndMouseActions @KeyboardAndMouse => new KeyboardAndMouseActions(this);
        public interface IKeyboardAndMouseActions
        {
            void OnMoveForward(InputAction.CallbackContext context);
            void OnShootBullets(InputAction.CallbackContext context);
            void OnShootLasser(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
        }
    }
}